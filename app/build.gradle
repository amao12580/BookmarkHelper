apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 25
    buildToolsVersion "24.0.3"
    defaultConfig {
        applicationId "pro.kisscat.www.bookmarkhelper"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "0.0.19-f1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        //大部分应用其实并不需要支持几十种语言的国际化支持。还好强大的gradle支持语言的配置，比如国内应用只支持中文、英文
        resConfigs "zh", "en"
        ndk {
            abiFilters "armeabi", "armeabi-v7a","arm64-v8a"
        }
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        debug {
            // 为了不和 release 版本冲突
            applicationIdSuffix ".debug"
        }
        //代码混淆：http://www.jianshu.com/p/f9438603e096
        release {
            debuggable false
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为appname-1.0-beta1-xxxx-xx-xx.apk
                        //def fileName = "app-${defaultConfig.versionName}-beta1-${releaseTime()}.apk"
                        def fileName = "app-debug.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
        println 'debug out info'
        println gitVersionCode()
        println gitVersionTag()
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.mergedFlavor.versionCode = gitVersionCode()
            //variant.mergedFlavor.versionName = gitVersionTag()
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:design:25.0.1'
    compile 'org.glassfish:javax.annotation:3.2-b06'
    compile 'com.alibaba:fastjson:1.2.21'
    compile 'com.android.support:support-v4:25.0.1'
    apt 'org.projectlombok:lombok:1.16.10'
    provided 'org.projectlombok:lombok:1.16.10'
    compile 'com.flyco.dialog:FlycoDialog_Lib:1.3.2@aar'
    compile 'com.github.hotchemi:permissionsdispatcher:2.2.0'
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:2.2.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.zxing:core:3.3.0'
    compile 'com.daimajia.numberprogressbar:library:1.2@aar'
}

//Android + Git，发布自动版本号方案：http://www.race604.com/android-auto-version/

def gitVersionCode() {
    def cmd = 'git rev-list HEAD --first-parent --count'
    cmd.execute().text.trim().toInteger()
}

def gitVersionTag() {
    def cmd = 'git describe --tags'
    def version = cmd.execute().text.trim()

    def pattern = "-(\\d+)-g"
    def matcher = version =~ pattern

    if (matcher) {
        version = version.substring(0, matcher.start()) + "." + matcher[0][1]
    } else {
        version = version + ".0"
    }

    return version
}

def releaseTime() {
    return new Date().format("yyyy.MM.dd", TimeZone.getTimeZone("UTC"))
}
